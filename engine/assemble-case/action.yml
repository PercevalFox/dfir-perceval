name: Assemble Case Report
description: "Assemble les rapports par type en un CaseReport.md (résumé exécutif, IoC, score global, reco, gaps)"
inputs:
  case_path:
    description: "Chemin du case"
    required: true
runs:
  using: composite
  steps:
    - name: Assemble enriched CaseReport (portable, sans arrays)
      shell: bash
      run: |
        set -euo pipefail
        CASE="${{ inputs.case_path }}"
        OUT="$CASE/reports"
        mkdir -p "$OUT"
        NOW="$(date -u +%Y-%m-%dT%H:%M:%SZ)"

        # -- helpers
        get_score() {
          local f="$1"; local s="0"
          if [ -f "$f" ]; then
            s="$(grep -Eo '"risk_score"\s*:\s*[0-9]+' "$f" | head -n1 | grep -Eo '[0-9]+' || echo 0)"
          fi
          echo "${s:-0}"
        }
        exists() { [ -f "$1" ]; }

        # -- lire scores
        RN="$CASE/outputs/per_type/network/report.json"
        RE="$CASE/outputs/per_type/endpoint/report.json"
        RS="$CASE/outputs/per_type/siem/report.json"
        RM="$CASE/outputs/per_type/mobile/report.json"

        SC_N="$(get_score "$RN")"
        SC_E="$(get_score "$RE")"
        SC_S="$(get_score "$RS")"
        SC_M="$(get_score "$RM")"

        # -- poids de base
        W_E=40; W_N=25; W_S=25; W_M=10
        SUMW=0
        TYPES_LIST=""

        if exists "$RE"; then SUMW=$((SUMW+W_E)); TYPES_LIST="${TYPES_LIST} endpoint"; fi
        if exists "$RN"; then SUMW=$((SUMW+W_N)); TYPES_LIST="${TYPES_LIST} network"; fi
        if exists "$RS"; then SUMW=$((SUMW+W_S)); TYPES_LIST="${TYPES_LIST} siem"; fi
        if exists "$RM"; then SUMW=$((SUMW+W_M)); TYPES_LIST="${TYPES_LIST} mobile"; fi
        [ "$SUMW" -eq 0 ] && SUMW=1

        # -- normalisation (fractions)
        nE=$(awk -v w="$W_E" -v t="$SUMW" 'BEGIN{print (w>0?t>0? w/t:0:0)}')
        nN=$(awk -v w="$W_N" -v t="$SUMW" 'BEGIN{print (w>0?t>0? w/t:0:0)}')
        nS=$(awk -v w="$W_S" -v t="$SUMW" 'BEGIN{print (w>0?t>0? w/t:0:0)}')
        nM=$(awk -v w="$W_M" -v t="$SUMW" 'BEGIN{print (w>0?t>0? w/t:0:0)}')

        # si un type est absent, son poids effectif = 0
        exists "$RE" || nE=0
        exists "$RN" || nN=0
        exists "$RS" || nS=0
        exists "$RM" || nM=0

        # -- score global
        GLOBAL=$(awk -v e="$SC_E" -v n="$SC_N" -v s="$SC_S" -v m="$SC_M" -v wE="$nE" -v wN="$nN" -v wS="$nS" -v wM="$nM" 'BEGIN{
          g = (e*wE) + (n*wN) + (s*wS) + (m*wM);
          printf "%.0f", g;
        }')

        risk_level() {
          local x="$1"
          if   [ "$x" -ge 70 ]; then echo "HAUT"
          elif [ "$x" -ge 40 ]; then echo "MOYEN"
          elif [ "$x" -ge 15 ]; then echo "FAIBLE"
          else echo "NÉGLIGEABLE"; fi
        }
        GLOBAL_LVL="$(risk_level "$GLOBAL")"

        # -- IoC extraction (simple)
        IN="$CASE/inputs"
        IOC_FILE="$OUT/ioc_table.md"
        {
          echo "| Type | Valeur | Source | Timestamp indicatif |"
          echo "|------|--------|--------|----------------------|"
          if [ -d "$IN/network" ]; then
            grep -Eoh '[a-zA-Z0-9.-]+\.(top|xyz|ru|cn|click|zip|mov|com|net|io)' "$IN/network"/* 2>/dev/null \
              | sort -u | head -n 50 | sed 's/.*/| Domaine | & | network | (voir fichier) |/'
            grep -Eoh '([0-9]{1,3}\.){3}[0-9]{1,3}' "$IN/network"/* 2>/dev/null \
              | sort -u | head -n 50 | sed 's/.*/| IP | & | network | (voir fichier) |/'
          fi
          grep -Eoh 'svc-[a-z0-9_-]+' "$IN"/endpoint/* "$IN"/siem/* 2>/dev/null \
            | sort -u | head -n 50 | sed 's/.*/| Compte | & | endpoint\/siem | (voir fichier) |/'
          grep -Eoh '\b(3389|445)\b' "$IN"/siem/* "$IN"/network/* 2>/dev/null \
            | sort -u | sed 's/.*/| Port | & | siem\/network | (voir fichier) |/'
          grep -Eoh 'powershell\s*-enc|certutil\s*-urlcache|bitsadmin|rundll32|rclone|vssadmin|bcdedit|ssh' "$IN"/endpoint/* 2>/dev/null \
            | sort -u | sed 's/.*/| Commande | & | endpoint | (timeline) /'
        } > "$IOC_FILE" || true

        # -- Intégrité & gaps
        HASH_NOTE="Hash non fourni (à générer sur archives d'inputs)"
        [ -d "$CASE/10_Acquisition/Hashes" ] && HASH_NOTE="Hashes présents (vérifier SHA256 des archives)"
        GAP_LIST=""
        [ -f "$CASE/inputs/endpoint/timeline.csv" ] || GAP_LIST="${GAP_LIST}\n- Timeline endpoint manquante"
        [ -d "$CASE/inputs/network" ] || GAP_LIST="${GAP_LIST}\n- Artefacts réseau absents"
        [ -d "$CASE/inputs/siem" ] || GAP_LIST="${GAP_LIST}\n- Exports SIEM absents"
        [ -d "$CASE/inputs/mobile" ] || GAP_LIST="${GAP_LIST}\n- Exports mobile absents"
        [ -n "$GAP_LIST" ] || GAP_LIST="(Rien de bloquant détecté)"

        # -- Meta
        META_TZ="$(grep -E '^timezone:' -h "$CASE/metadata/case.yml" 2>/dev/null | awk '{print $2}' || true)"
        META_PER="$(grep -E '^period:'   -h "$CASE/metadata/case.yml" 2>/dev/null | awk '{print $2}' || true)"
        [ -n "${META_TZ:-}" ] || META_TZ="UTC"
        [ -n "${META_PER:-}" ] || META_PER="(période non précisée)"
        VERDICT="Probable activité malveillante — à confirmer"
        [ "$GLOBAL" -ge 70 ] && VERDICT="Activité malveillante probable (HAUT) — containment conseillé"

        # -- Types analysés (jolie liste)
        TYPES_LIST="$(echo "${TYPES_LIST# }" | sed 's/ /, /g')"
        [ -n "$TYPES_LIST" ] || TYPES_LIST="none"

        # -- Recos
        if [ "$GLOBAL" -ge 70 ]; then
          RECO_IMM="- Isoler l'hôte, geler preuves, réinit secrets\n- Bloquer domaines/IP observés (proxy/DNS/EDR)\n- Vérifier persistance (services, tâches planifiées)"
          RECO_7D="- Durcir journaux (Sécurité/PowerShell), GPO\n- Revue comptes/groupes, renforcer MFA"
          RECO_30D="- Surveiller IoC 30j (SIEM)\n- Playbooks & leçons apprises"
        elif [ "$GLOBAL" -ge 40 ]; then
          RECO_IMM="- Corrélation SIEM ciblée sur créneaux/hosts\n- Vérifier comptes/modifs récentes"
          RECO_7D="- Compléter artefacts manquants, durcissement basique"
          RECO_30D="- Surveillance élargie + sensibilisation"
        else
          RECO_IMM="- Continuer analyse standard selon hypothèses"
          RECO_7D="- Compléter artefacts (SIEM/proxy/RAM si pertinent)"
          RECO_30D="- Mettre à jour règles et tableaux de bord"
        fi

        CR="$OUT/CaseReport.md"
        {
          echo "# Case Report"
          echo "_Généré le: $NOW (UTC)_"
          echo
          echo "## Résumé exécutif"
          echo "- **Période** : $META_PER ($META_TZ)"
          echo "- **Verdict** : $VERDICT"
          echo "- **Risque global** : $GLOBAL ($GLOBAL_LVL)"
          echo "- **Types analysés** : $TYPES_LIST"
          echo "- **Prochaines actions (flash)** : voir Recommandations ci-dessous"
          echo
          echo "## Table d'IoC (extrait)"
          if [ -s "$IOC_FILE" ]; then
            cat "$IOC_FILE"
          else
            echo "_Aucun IoC extrait automatiquement._"
          fi
          echo
          echo "## Cohérence temporelle"
          echo "- Horodatages **$META_TZ** ; aligner SIEM / endpoint / réseau. Attention aux décalages locaux."
          echo
          echo "## Intégrité & traçabilité"
          echo "- $HASH_NOTE"
          echo
          echo "## Recommandations priorisées"
          echo "### Immédiat (0–24h)"
          printf "%b\n" "$RECO_IMM"
          echo
          echo "### Sous 7 jours"
          printf "%b\n" "$RECO_7D"
          echo
          echo "### Sous 30 jours"
          printf "%b\n" "$RECO_30D"
          echo
          echo "## Gaps / Manques"
          printf "%b\n" "$GAP_LIST"
          echo

          for TYPE in network endpoint siem mobile; do
            MD="$CASE/outputs/per_type/$TYPE/report.md"
            if [ -f "$MD" ]; then
              echo "## $(echo "$TYPE" | tr '[:lower:]' '[:upper:]')"
              echo
              cat "$MD"
              echo
            fi
          done

          if ! [ -f "$CASE/outputs/per_type/network/report.md" ] && \
             ! [ -f "$CASE/outputs/per_type/endpoint/report.md" ] && \
             ! [ -f "$CASE/outputs/per_type/siem/report.md" ] && \
             ! [ -f "$CASE/outputs/per_type/mobile/report.md" ]; then
            echo "_Aucune section de type détectée._"
          fi
        } > "$CR"
